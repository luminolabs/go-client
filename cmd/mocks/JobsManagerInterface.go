// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// JobsManagerInterface is an autogenerated mock type for the JobsManagerInterface type
type JobsManagerInterface struct {
	mock.Mock
}

// CreateJob provides a mock function with given fields: client, opts, jobDetailsJSON
func (_m *JobsManagerInterface) CreateJob(client *ethclient.Client, opts *bind.TransactOpts, jobDetailsJSON string) (*types.Transaction, error) {
	ret := _m.Called(client, opts, jobDetailsJSON)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, string) (*types.Transaction, error)); ok {
		return rf(client, opts, jobDetailsJSON)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, string) *types.Transaction); ok {
		r0 = rf(client, opts, jobDetailsJSON)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, string) error); ok {
		r1 = rf(client, opts, jobDetailsJSON)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobStatus provides a mock function with given fields: client, opts, jobId, status, buffer
func (_m *JobsManagerInterface) UpdateJobStatus(client *ethclient.Client, opts *bind.TransactOpts, jobId *big.Int, status uint8, buffer uint8) (*types.Transaction, error) {
	ret := _m.Called(client, opts, jobId, status, buffer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobStatus")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, *big.Int, uint8, uint8) (*types.Transaction, error)); ok {
		return rf(client, opts, jobId, status, buffer)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, *bind.TransactOpts, *big.Int, uint8, uint8) *types.Transaction); ok {
		r0 = rf(client, opts, jobId, status, buffer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, *bind.TransactOpts, *big.Int, uint8, uint8) error); ok {
		r1 = rf(client, opts, jobId, status, buffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJobsManagerInterface creates a new instance of JobsManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobsManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobsManagerInterface {
	mock := &JobsManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
