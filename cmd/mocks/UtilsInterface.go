// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"
)

// UtilsInterface is an autogenerated mock type for the UtilsInterface type
type UtilsInterface struct {
	mock.Mock
}

// ConnectToEthClient provides a mock function with given fields: provider
func (_m *UtilsInterface) ConnectToEthClient(provider string) *ethclient.Client {
	ret := _m.Called(provider)

	if len(ret) == 0 {
		panic("no return value specified for ConnectToEthClient")
	}

	var r0 *ethclient.Client
	if rf, ok := ret.Get(0).(func(string) *ethclient.Client); ok {
		r0 = rf(provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ethclient.Client)
		}
	}

	return r0
}

// GetAmountInWei provides a mock function with given fields: amount
func (_m *UtilsInterface) GetAmountInWei(amount *big.Int) *big.Int {
	ret := _m.Called(amount)

	if len(ret) == 0 {
		panic("no return value specified for GetAmountInWei")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*big.Int) *big.Int); ok {
		r0 = rf(amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetDelayedState provides a mock function with given fields: client, buffer
func (_m *UtilsInterface) GetDelayedState(client *ethclient.Client, buffer int32) (int64, error) {
	ret := _m.Called(client, buffer)

	if len(ret) == 0 {
		panic("no return value specified for GetDelayedState")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, int32) (int64, error)); ok {
		return rf(client, buffer)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, int32) int64); ok {
		r0 = rf(client, buffer)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, int32) error); ok {
		r1 = rf(client, buffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpoch provides a mock function with given fields: client
func (_m *UtilsInterface) GetEpoch(client *ethclient.Client) (uint32, error) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetEpoch")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (uint32, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) uint32); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOptions provides a mock function with given fields:
func (_m *UtilsInterface) GetOptions() bind.CallOpts {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 bind.CallOpts
	if rf, ok := ret.Get(0).(func() bind.CallOpts); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bind.CallOpts)
	}

	return r0
}

// NewUtilsInterface creates a new instance of UtilsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUtilsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UtilsInterface {
	mock := &UtilsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
