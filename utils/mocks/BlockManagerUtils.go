// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	ethclient "github.com/ethereum/go-ethereum/ethclient"
	mock "github.com/stretchr/testify/mock"
)

// BlockManagerUtils is an autogenerated mock type for the BlockManagerUtils type
type BlockManagerUtils struct {
	mock.Mock
}

// StateBuffer provides a mock function with given fields: client
func (_m *BlockManagerUtils) StateBuffer(client *ethclient.Client) (uint8, error) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for StateBuffer")
	}

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (uint8, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) uint8); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlockManagerUtils creates a new instance of BlockManagerUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockManagerUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockManagerUtils {
	mock := &BlockManagerUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
