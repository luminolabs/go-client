// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	bindings "lumino/pkg/bindings"
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	coretypes "github.com/ethereum/go-ethereum/core/types"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	ethereum "github.com/ethereum/go-ethereum"

	mock "github.com/stretchr/testify/mock"

	pflag "github.com/spf13/pflag"

	types "lumino/core/types"
)

// Utils is an autogenerated mock type for the Utils type
type Utils struct {
	mock.Mock
}

// AssignLogFile provides a mock function with given fields: flagSet
func (_m *Utils) AssignLogFile(flagSet *pflag.FlagSet) {
	_m.Called(flagSet)
}

// AssignStakerId provides a mock function with given fields: flagSet, client, address
func (_m *Utils) AssignStakerId(flagSet *pflag.FlagSet, client *ethclient.Client, address string) (uint32, error) {
	ret := _m.Called(flagSet, client, address)

	if len(ret) == 0 {
		panic("no return value specified for AssignStakerId")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet, *ethclient.Client, string) (uint32, error)); ok {
		return rf(flagSet, client, address)
	}
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet, *ethclient.Client, string) uint32); ok {
		r0 = rf(flagSet, client, address)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*pflag.FlagSet, *ethclient.Client, string) error); ok {
		r1 = rf(flagSet, client, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckTransactionReceipt provides a mock function with given fields: client, _txHash
func (_m *Utils) CheckTransactionReceipt(client *ethclient.Client, _txHash string) int {
	ret := _m.Called(client, _txHash)

	if len(ret) == 0 {
		panic("no return value specified for CheckTransactionReceipt")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string) int); ok {
		r0 = rf(client, _txHash)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// EstimateGasWithRetry provides a mock function with given fields: client, message
func (_m *Utils) EstimateGasWithRetry(client *ethclient.Client, message ethereum.CallMsg) (uint64, error) {
	ret := _m.Called(client, message)

	if len(ret) == 0 {
		panic("no return value specified for EstimateGasWithRetry")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, ethereum.CallMsg) (uint64, error)); ok {
		return rf(client, message)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, ethereum.CallMsg) uint64); ok {
		r0 = rf(client, message)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, ethereum.CallMsg) error); ok {
		r1 = rf(client, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchBalance provides a mock function with given fields: ctx, client, accountAddress
func (_m *Utils) FetchBalance(ctx context.Context, client *ethclient.Client, accountAddress common.Address) (*big.Int, error) {
	ret := _m.Called(ctx, client, accountAddress)

	if len(ret) == 0 {
		panic("no return value specified for FetchBalance")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ethclient.Client, common.Address) (*big.Int, error)); ok {
		return rf(ctx, client, accountAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ethclient.Client, common.Address) *big.Int); ok {
		r0 = rf(ctx, client, accountAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ethclient.Client, common.Address) error); ok {
		r1 = rf(ctx, client, accountAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockManager provides a mock function with given fields: client
func (_m *Utils) GetBlockManager(client *ethclient.Client) *bindings.BlockManager {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockManager")
	}

	var r0 *bindings.BlockManager
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.BlockManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.BlockManager)
		}
	}

	return r0
}

// GetBlockManagerWithOpts provides a mock function with given fields: client
func (_m *Utils) GetBlockManagerWithOpts(client *ethclient.Client) (*bindings.BlockManager, bind.CallOpts) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockManagerWithOpts")
	}

	var r0 *bindings.BlockManager
	var r1 bind.CallOpts
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (*bindings.BlockManager, bind.CallOpts)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.BlockManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.BlockManager)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) bind.CallOpts); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Get(1).(bind.CallOpts)
	}

	return r0, r1
}

// GetDelayedState provides a mock function with given fields: client, buffer
func (_m *Utils) GetDelayedState(client *ethclient.Client, buffer int32) (int64, error) {
	ret := _m.Called(client, buffer)

	if len(ret) == 0 {
		panic("no return value specified for GetDelayedState")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, int32) (int64, error)); ok {
		return rf(client, buffer)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, int32) int64); ok {
		r0 = rf(client, buffer)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, int32) error); ok {
		r1 = rf(client, buffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpoch provides a mock function with given fields: client
func (_m *Utils) GetEpoch(client *ethclient.Client) (uint32, error) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetEpoch")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (uint32, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) uint32); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasLimit provides a mock function with given fields: transactionData, txnOpts
func (_m *Utils) GetGasLimit(transactionData types.TransactionOptions, txnOpts *bind.TransactOpts) (uint64, error) {
	ret := _m.Called(transactionData, txnOpts)

	if len(ret) == 0 {
		panic("no return value specified for GetGasLimit")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(types.TransactionOptions, *bind.TransactOpts) (uint64, error)); ok {
		return rf(transactionData, txnOpts)
	}
	if rf, ok := ret.Get(0).(func(types.TransactionOptions, *bind.TransactOpts) uint64); ok {
		r0 = rf(transactionData, txnOpts)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(types.TransactionOptions, *bind.TransactOpts) error); ok {
		r1 = rf(transactionData, txnOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGasPrice provides a mock function with given fields: client, config
func (_m *Utils) GetGasPrice(client *ethclient.Client, config types.Configurations) *big.Int {
	ret := _m.Called(client, config)

	if len(ret) == 0 {
		panic("no return value specified for GetGasPrice")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*ethclient.Client, types.Configurations) *big.Int); ok {
		r0 = rf(client, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetLatestBlockWithRetry provides a mock function with given fields: client
func (_m *Utils) GetLatestBlockWithRetry(client *ethclient.Client) (*coretypes.Header, error) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockWithRetry")
	}

	var r0 *coretypes.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (*coretypes.Header, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *coretypes.Header); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLock provides a mock function with given fields: client, address
func (_m *Utils) GetLock(client *ethclient.Client, address string) (types.Locks, error) {
	ret := _m.Called(client, address)

	if len(ret) == 0 {
		panic("no return value specified for GetLock")
	}

	var r0 types.Locks
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string) (types.Locks, error)); ok {
		return rf(client, address)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string) types.Locks); ok {
		r0 = rf(client, address)
	} else {
		r0 = ret.Get(0).(types.Locks)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, string) error); ok {
		r1 = rf(client, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNonceAtWithRetry provides a mock function with given fields: client, accountAddress
func (_m *Utils) GetNonceAtWithRetry(client *ethclient.Client, accountAddress common.Address) (uint64, error) {
	ret := _m.Called(client, accountAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetNonceAtWithRetry")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address) (uint64, error)); ok {
		return rf(client, accountAddress)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, common.Address) uint64); ok {
		r0 = rf(client, accountAddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, common.Address) error); ok {
		r1 = rf(client, accountAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOptions provides a mock function with given fields:
func (_m *Utils) GetOptions() bind.CallOpts {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 bind.CallOpts
	if rf, ok := ret.Get(0).(func() bind.CallOpts); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bind.CallOpts)
	}

	return r0
}

// GetStakeManager provides a mock function with given fields: client
func (_m *Utils) GetStakeManager(client *ethclient.Client) *bindings.StakeManager {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetStakeManager")
	}

	var r0 *bindings.StakeManager
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.StakeManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.StakeManager)
		}
	}

	return r0
}

// GetStakeManagerWithOpts provides a mock function with given fields: client
func (_m *Utils) GetStakeManagerWithOpts(client *ethclient.Client) (*bindings.StakeManager, bind.CallOpts) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetStakeManagerWithOpts")
	}

	var r0 *bindings.StakeManager
	var r1 bind.CallOpts
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (*bindings.StakeManager, bind.CallOpts)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.StakeManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.StakeManager)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) bind.CallOpts); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Get(1).(bind.CallOpts)
	}

	return r0, r1
}

// GetStaker provides a mock function with given fields: client, stakerId
func (_m *Utils) GetStaker(client *ethclient.Client, stakerId uint32) (bindings.StructsStaker, error) {
	ret := _m.Called(client, stakerId)

	if len(ret) == 0 {
		panic("no return value specified for GetStaker")
	}

	var r0 bindings.StructsStaker
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32) (bindings.StructsStaker, error)); ok {
		return rf(client, stakerId)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint32) bindings.StructsStaker); ok {
		r0 = rf(client, stakerId)
	} else {
		r0 = ret.Get(0).(bindings.StructsStaker)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint32) error); ok {
		r1 = rf(client, stakerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakerId provides a mock function with given fields: client, address
func (_m *Utils) GetStakerId(client *ethclient.Client, address string) (uint32, error) {
	ret := _m.Called(client, address)

	if len(ret) == 0 {
		panic("no return value specified for GetStakerId")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string) (uint32, error)); ok {
		return rf(client, address)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string) uint32); ok {
		r0 = rf(client, address)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, string) error); ok {
		r1 = rf(client, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateBuffer provides a mock function with given fields: client
func (_m *Utils) GetStateBuffer(client *ethclient.Client) (uint64, error) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetStateBuffer")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (uint64, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) uint64); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateManager provides a mock function with given fields: client
func (_m *Utils) GetStateManager(client *ethclient.Client) *bindings.StateManager {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetStateManager")
	}

	var r0 *bindings.StateManager
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.StateManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.StateManager)
		}
	}

	return r0
}

// GetStateManagerWithOpts provides a mock function with given fields: client
func (_m *Utils) GetStateManagerWithOpts(client *ethclient.Client) (*bindings.StateManager, bind.CallOpts) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetStateManagerWithOpts")
	}

	var r0 *bindings.StateManager
	var r1 bind.CallOpts
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (*bindings.StateManager, bind.CallOpts)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *bindings.StateManager); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.StateManager)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) bind.CallOpts); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Get(1).(bind.CallOpts)
	}

	return r0, r1
}

// GetStateName provides a mock function with given fields: stateNumber
func (_m *Utils) GetStateName(stateNumber int64) string {
	ret := _m.Called(stateNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetStateName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(stateNumber)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTransactionOpts provides a mock function with given fields: transactionData
func (_m *Utils) GetTransactionOpts(transactionData types.TransactionOptions) *bind.TransactOpts {
	ret := _m.Called(transactionData)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionOpts")
	}

	var r0 *bind.TransactOpts
	if rf, ok := ret.Get(0).(func(types.TransactionOptions) *bind.TransactOpts); ok {
		r0 = rf(transactionData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.TransactOpts)
		}
	}

	return r0
}

// GetUint32 provides a mock function with given fields: flagSet, name
func (_m *Utils) GetUint32(flagSet *pflag.FlagSet, name string) (uint32, error) {
	ret := _m.Called(flagSet, name)

	if len(ret) == 0 {
		panic("no return value specified for GetUint32")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet, string) (uint32, error)); ok {
		return rf(flagSet, name)
	}
	if rf, ok := ret.Get(0).(func(*pflag.FlagSet, string) uint32); ok {
		r0 = rf(flagSet, name)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*pflag.FlagSet, string) error); ok {
		r1 = rf(flagSet, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseGasLimitValue provides a mock function with given fields: client, gasLimit, gasLimitMultiplier
func (_m *Utils) IncreaseGasLimitValue(client *ethclient.Client, gasLimit uint64, gasLimitMultiplier float32) (uint64, error) {
	ret := _m.Called(client, gasLimit, gasLimitMultiplier)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseGasLimitValue")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint64, float32) (uint64, error)); ok {
		return rf(client, gasLimit, gasLimitMultiplier)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client, uint64, float32) uint64); ok {
		r0 = rf(client, gasLimit, gasLimitMultiplier)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client, uint64, float32) error); ok {
		r1 = rf(client, gasLimit, gasLimitMultiplier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsFlagPassed provides a mock function with given fields: name
func (_m *Utils) IsFlagPassed(name string) bool {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for IsFlagPassed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MultiplyFloatAndBigInt provides a mock function with given fields: bigIntVal, floatingVal
func (_m *Utils) MultiplyFloatAndBigInt(bigIntVal *big.Int, floatingVal float64) *big.Int {
	ret := _m.Called(bigIntVal, floatingVal)

	if len(ret) == 0 {
		panic("no return value specified for MultiplyFloatAndBigInt")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*big.Int, float64) *big.Int); ok {
		r0 = rf(bigIntVal, floatingVal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// SuggestGasPriceWithRetry provides a mock function with given fields: client
func (_m *Utils) SuggestGasPriceWithRetry(client *ethclient.Client) (*big.Int, error) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for SuggestGasPriceWithRetry")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (*big.Int, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *big.Int); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForBlockCompletion provides a mock function with given fields: client, hashToRead
func (_m *Utils) WaitForBlockCompletion(client *ethclient.Client, hashToRead string) error {
	ret := _m.Called(client, hashToRead)

	if len(ret) == 0 {
		panic("no return value specified for WaitForBlockCompletion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client, string) error); ok {
		r0 = rf(client, hashToRead)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUtils creates a new instance of Utils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *Utils {
	mock := &Utils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
