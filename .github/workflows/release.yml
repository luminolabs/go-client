name: unit-tests

on:
  # TODO:
  # - unit tests
  # - coverages
  # - lint
  # push: # only when you push a change
  #   tags:
  #     - "*"
  push:
    # Don't run this workflow on master branch,
    # we run a different workflow when merging on main
    branches:
      - '**'
      - '!main'
    # Run workflow only if these folders changed
    paths: [ 'accounts/**', 'cmd/**', 'utils/**', 'pipeline-zen/**', 'logger/**', 'scripts/**', '.github/**' ]
  pull_request:
    branches:
      - '**'
      - '!main'
    # Run workflow only if these folders changed
    paths: [ 'accounts/**', 'cmd/**', 'utils/**', 'pipeline-zen/**', 'logger/**', 'scripts/**', '.github/**' ]


permissions:
  contents: read

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20  # Adjust the version as needed

      # Cache Go modules to speed up builds
      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Install dependencies
      - name: Install Dependencies
        run: go mod tidy

      # Run unit tests
      - name: Run Unit Tests
        run: go test ./... -v
  # For Release
  # goreleaser:
  #   runs-on: ubuntu-latest
  #   steps:
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     -
  #       name: Fetch all tags
  #       run: git fetch --force --tags
  #     -
  #       name: Set up Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.22
  #     -
  #       name: Run GoReleaser
  #       uses: goreleaser/goreleaser-action@v2
  #       with:
  #         distribution: goreleaser
  #         version: ${{ env.GITHUB_REF_NAME }}
  #         args: release --rm-dist
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.PUBLISHER_TOKEN }}
