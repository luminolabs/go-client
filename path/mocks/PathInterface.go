// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PathInterface is an autogenerated mock type for the PathInterface type
type PathInterface struct {
	mock.Mock
}

// GetConfigFilePath provides a mock function with given fields:
func (_m *PathInterface) GetConfigFilePath() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfigFilePath")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultPath provides a mock function with given fields:
func (_m *PathInterface) GetDefaultPath() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultPath")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogFilePath provides a mock function with given fields: fileName
func (_m *PathInterface) GetLogFilePath(fileName string) (string, error) {
	ret := _m.Called(fileName)

	if len(ret) == 0 {
		panic("no return value specified for GetLogFilePath")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(fileName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPathInterface creates a new instance of PathInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPathInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PathInterface {
	mock := &PathInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
