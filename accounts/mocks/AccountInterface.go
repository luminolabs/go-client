// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	ecdsa "crypto/ecdsa"

	accounts "github.com/ethereum/go-ethereum/accounts"

	keystore "github.com/ethereum/go-ethereum/accounts/keystore"

	mock "github.com/stretchr/testify/mock"

	types "lumino/core/types"
)

// AccountInterface is an autogenerated mock type for the AccountInterface type
type AccountInterface struct {
	mock.Mock
}

// Accounts provides a mock function with given fields: path
func (_m *AccountInterface) Accounts(path string) []accounts.Account {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Accounts")
	}

	var r0 []accounts.Account
	if rf, ok := ret.Get(0).(func(string) []accounts.Account); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accounts.Account)
		}
	}

	return r0
}

// CreateAccount provides a mock function with given fields: path, password
func (_m *AccountInterface) CreateAccount(path string, password string) accounts.Account {
	ret := _m.Called(path, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 accounts.Account
	if rf, ok := ret.Get(0).(func(string, string) accounts.Account); ok {
		r0 = rf(path, password)
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	return r0
}

// DecryptKey provides a mock function with given fields: jsonBytes, password
func (_m *AccountInterface) DecryptKey(jsonBytes []byte, password string) (*keystore.Key, error) {
	ret := _m.Called(jsonBytes, password)

	if len(ret) == 0 {
		panic("no return value specified for DecryptKey")
	}

	var r0 *keystore.Key
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string) (*keystore.Key, error)); ok {
		return rf(jsonBytes, password)
	}
	if rf, ok := ret.Get(0).(func([]byte, string) *keystore.Key); ok {
		r0 = rf(jsonBytes, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keystore.Key)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(jsonBytes, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateKey provides a mock function with given fields: address, password, keystorePath
func (_m *AccountInterface) GetPrivateKey(address string, password string, keystorePath string) (*ecdsa.PrivateKey, error) {
	ret := _m.Called(address, password, keystorePath)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateKey")
	}

	var r0 *ecdsa.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*ecdsa.PrivateKey, error)); ok {
		return rf(address, password, keystorePath)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *ecdsa.PrivateKey); ok {
		r0 = rf(address, password, keystorePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(address, password, keystorePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateKeyFromKeystore provides a mock function with given fields: keystorePath, password
func (_m *AccountInterface) GetPrivateKeyFromKeystore(keystorePath string, password string) (*ecdsa.PrivateKey, error) {
	ret := _m.Called(keystorePath, password)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateKeyFromKeystore")
	}

	var r0 *ecdsa.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*ecdsa.PrivateKey, error)); ok {
		return rf(keystorePath, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *ecdsa.PrivateKey); ok {
		r0 = rf(keystorePath, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(keystorePath, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccount provides a mock function with given fields: path, passphrase
func (_m *AccountInterface) NewAccount(path string, passphrase string) (accounts.Account, error) {
	ret := _m.Called(path, passphrase)

	if len(ret) == 0 {
		panic("no return value specified for NewAccount")
	}

	var r0 accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (accounts.Account, error)); ok {
		return rf(path, passphrase)
	}
	if rf, ok := ret.Get(0).(func(string, string) accounts.Account); ok {
		r0 = rf(path, passphrase)
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(path, passphrase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFile provides a mock function with given fields: filename
func (_m *AccountInterface) ReadFile(filename string) ([]byte, error) {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sign provides a mock function with given fields: digestHash, prv
func (_m *AccountInterface) Sign(digestHash []byte, prv *ecdsa.PrivateKey) ([]byte, error) {
	ret := _m.Called(digestHash, prv)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, *ecdsa.PrivateKey) ([]byte, error)); ok {
		return rf(digestHash, prv)
	}
	if rf, ok := ret.Get(0).(func([]byte, *ecdsa.PrivateKey) []byte); ok {
		r0 = rf(digestHash, prv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, *ecdsa.PrivateKey) error); ok {
		r1 = rf(digestHash, prv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignData provides a mock function with given fields: hash, account, defaultPath
func (_m *AccountInterface) SignData(hash []byte, account types.Account, defaultPath string) ([]byte, error) {
	ret := _m.Called(hash, account, defaultPath)

	if len(ret) == 0 {
		panic("no return value specified for SignData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, types.Account, string) ([]byte, error)); ok {
		return rf(hash, account, defaultPath)
	}
	if rf, ok := ret.Get(0).(func([]byte, types.Account, string) []byte); ok {
		r0 = rf(hash, account, defaultPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, types.Account, string) error); ok {
		r1 = rf(hash, account, defaultPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountInterface creates a new instance of AccountInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountInterface {
	mock := &AccountInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
